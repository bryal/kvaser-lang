;;; Solving the exercises of SICP in Kvasir

(import std)

;;; 1.3
(define (max x y)
  (if (> x y)
      x
    y))

(define (square x) (* x x))

(define (sum-squares x y)
  (+ (square x) (square y)))

(define (foo x y z)
  (if (> x y)
      (sum-squares x (max y z))
    (sum-squares y (max x z))))
;;;

;;; 1.4
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))
;;;

(define (abs x)
  (if (< x 0)
      (- 0 x)
    x))

(define (average x y)
  (/ (+ x y) 2))

(define (sqrt x)
  (let [[(improve guess x)
         (average guess (/ x guess))]
        [(good-enough? guess x)
         (< (abs (- (square guess) x)) 0.0001)]
        [(sqrt-iter guess x)
         (if (good-enough? guess x)
             guess
           (sqrt-iter (improve guess x) x))]]
    (sqrt-iter 1.0 x)))

(define (factorial n)
  (let (((iter p i)
         (if (= i 0)
             p
           (iter (* i p) (- i 1)))))
    (iter 1 n)))

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

(define (fib n)
  (let (((fib-iter a b i) (if (= i 0)
                              a
                            (fib-iter b (+ a b) (- i 1)))))
    (fib-iter 0 1 n)))

(define (even? n)
  (= (remainder n 2) 0))

;; Exercise 1.16
(define (expt b n)
  (let (((iter acc b i)
         (cond ((= i 0)
                acc)
               ((even? i)
                (iter acc (square b) (/ i 2)))
               (else
                (iter (* acc b) b (- i 1))))))
    (iter 1 b n)))

(define (gcd a b)
  (if (= b 0)
      a
    (gcd b (remainder a b))))

(define (divides? a b)
  (= (remainder b a) 0))

(define main
  (display (dec-to-s (: 0.123 Float64))))
