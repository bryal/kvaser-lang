;;; Section Macros

(macro list
  [()           empty]
  [(x (... xs)) (pre x (list (... xs)))])

(macro do-io
  [(io) io]
  [(('<- x io) (... ios))
   (bind-io io (lambda (x) (do-io (... ios))))]
  [(io (... ios))
   (seq-io io (do-io (... ios)))])

;;; Section Logic and Math

(extern exp (-> Float64 Float64))
(extern log (-> Float64 Float64))
(extern sin (-> Float64 Float64))
(extern cos (-> Float64 Float64))

(define (pow b e)
  (exp (* e (log b))))

(define (not b) (if b false true))
(define (and a b) (if a b false))
(define (or a b) (if a true b))

(define (+ x y) (add (cons x y)))
(define (- x y) (sub (cons x y)))
(define (* x y) (mul (cons x y)))
(define (/ x y) (div (cons x y)))

(define (= x y) (eq (cons x y)))
(define (/= x y) (neq (cons x y)))
(define (> x y) (gt (cons x y)))
(define (>= x y) (gteq (cons x y)))
(define (< x y) (lt (cons x y)))
(define (<= x y) (lteq (cons x y)))

(define inc (+ 1))
(define (dec x) (- x 1))

(define (min a b) (if (< a b) a b))
(define (max a b) (if (> a b) a b))

(define (square x) (* x x))

(define (neg x) (- 0 x))

(define (abs x)
  (if (< x 0)
      (neg x)
    x))

(define: (int x)
    (constrain [(Num t)] (-> t Int64))
  (cast x Int64))

(define: (floor x)
    (constrain [(Num t)] (-> t t))
  (cast (int x) t))

(define (remainder n d)
  (- n (* (floor (/ n d)) d)))

(define (divisible-by n d)
  (= (remainder n d) 0))

;;; Section Lists

(data (List t)
  Empty
  (List t (List t)))

(define empty (new Empty))
(define (single e) (new List e empty))

(define (head l)
  (match l
    [Empty       (panic "head of empty list")]
    [(List e _) e]))

(define (tail l)
  (match l
    [Empty       (panic "Tail of empty list")]
    [(List _ l') l']))

(define (pre e l)
  (new List e l))

(define (post l e)
  (append l (single e)))

(define (append l1 l2)
  (match l1
    [Empty        l2]
    [(List e l1') (pre e (append l1' l2))]))

(define (concat xs)
  (foldl append empty xs))

(define (empty? l)
  (match l
    [Empty true]
    [_     false]))

(define: (map f l)
    (-> (-> a b) (List a) (List b))
  (match l
    [Empty       empty]
    [(List e l') (pre (f e) (map f l'))]))

(define: (foldl f acc xs)
    (-> (-> a b a) a (List b) a)
  (match xs
    [Empty        acc]
    [(List x xs') (foldl f (f acc x) xs')]))

(define: (intersperse y xs)
    (-> a (List a) (List a))
  (match xs
    [(List a (List b xs')) (pre a (pre y (intersperse y (pre b xs'))))]
    [_                     xs]))

;;; Section Maps

;; Naive, non-balancing
;; TODO: Make gooder
(data (TreeMap k v)
  TreeEmpty
  (TreeNode k v (TreeMap k v) (TreeMap k v)))
(define TreeEmpty (new TreeEmpty))
(define (TreeNode k v l r) (new TreeNode k v l r))

(data Cmp
  Lt
  Eq
  Gt)

(define Lt (new Lt))
(define Eq (new Eq))
(define Gt (new Gt))

(define (lt? cmp)
  (match cmp
    [Lt true]
    [_  false]))
(define (eq? cmp)
  (match cmp
    [Eq true]
    [_  false]))
(define (gt? cmp)
  (match cmp
    [Gt true]
    [_  false]))

(define (insert-tree cmp-f tree k v)
  (match tree
    [TreeEmpty            (TreeNode k v TreeEmpty TreeEmpty)]
    [(TreeNode k' v' l r) (match (cmp-f k k')
                            [Lt (TreeNode k' v' (insert-tree cmp-f l k v) r)]
                            [Gt (TreeNode k' v' l (insert-tree cmp-f r k v))]
                            [Eq (TreeNode k' v l r)])]))

(define (lookup-tree cmp-f tree k)
  (match tree
    [TreeEmpty           None]
    [(TreeNode k' v l r) (match (cmp-f k k')
                           [Lt (lookup-tree cmp-f l k)]
                           [Gt (lookup-tree cmp-f r k)]
                           [Eq (Some v)])]))

(define (tree-from-list cmp-f kvs)
  (foldl (lambda (acc kv) (insert-tree cmp-f acc (car kv) (cdr kv)))
         TreeEmpty
         kvs))

;;; Section Strings
;;;
;;; Represent strings as a pair of (pointer to string data) and length
;;; I.e. (Cons UIntPtr (Ptr UInt8))

(extern str_lit_to_string (-> (Cons UIntPtr (Ptr UInt8)) String))

(data String
  StrEmpty
  (StrCons UInt32 String))

(define (empty-s? s)
  (match s
    [StrEmpty true]
    [_        false]))

(define (c-to-s c)
  (pre-s c (new StrEmpty)))

(define (pre-s c s)
  (new StrCons c s))

(define (post-s s c)
  (match s
    [StrEmpty        (pre-s c "")]
    [(StrCons c' s') (pre-s c' (post-s s' c))]))

(define (append-s s1 s2)
  (match s1
    [StrEmpty        s2]
    [(StrCons c s1') (new StrCons c (append-s s1' s2))]))

(define (concat-s ss)
  (foldl append-s (new StrEmpty) ss))

(define (to-digit n)
  (cast (+ 48 n) UInt32))

(define: (int-to-s' s n)
    (-> String Int64 String)
  (let ([n' (/ n 10)]
        [r  (remainder n 10)]
        [c  (to-digit r)]
        [s' (new StrCons c s)])
    (if (= n' 0)
        s'
      (int-to-s' s' n'))))

(define (int-to-s n)
  (int-to-s' "" n))

(define (dec-to-s' e x)
  (let [[e'    (* e 10)]
        [y     (* x 10)]
        [inty  (floor y)]
        [x'    (- y inty)]
        [c     (to-digit inty)]]
    (if (< x' e')
        (c-to-s c)
      (pre-s c
             (dec-to-s' (* e 10) x')))))

(define (dec-to-s x)
  (dec-to-s' 0.000001 (abs x)))

(define: (num-to-s x)
    (constrain [(Num t)] (-> t String))
  (let [[intx (floor x)]
        [decx (- x intx)]
        [ints (int-to-s (int intx))]]
    (if (= decx 0)
        ints
      (let [[decs (dec-to-s (cast decx Float64))]]
        (append-s ints (append-s "." decs))))))

(define: (nums-to-s xs)
    (constrain [(Num t)]
               (-> (List t) String))
  (foldl append-s "" (intersperse " " (map num-to-s xs))))

;;; Section Input/output

(extern read_int64 (-> RealWorld (Cons Int64 RealWorld)))
(extern read_uint64 (-> RealWorld (Cons UInt64 RealWorld)))
(extern print_int64 (-> (Cons Int64 RealWorld) (Cons Nil RealWorld)))
(extern print_uint64 (-> (Cons UInt64 RealWorld) (Cons Nil RealWorld)))
(extern print_float64 (-> (Cons Float64 RealWorld) (Cons Nil RealWorld)))

(extern c_display (-> (Cons String RealWorld)
                      (Cons Nil RealWorld)))

(define (display s real-world) (c_display (cons s real-world)))

(define read-int64 read_int64)
(define read-uint64 read_uint64)

(define (print-int64 x)
  (lambda [real-world]
    (print_int64 (cons x real-world))))

(define (print-uint64 x)
  (lambda (real-world)
    (print_uint64 (cons x real-world))))

(define (print-float64 x)
  (lambda (real-world)
    (print_float64 (cons x real-world))))

(define (seq-io io1 io2)
  (lambda (real-world)
    (io2 (cdr (io1 real-world)))))

(define (bind-io io f)
  (lambda (real-world)
    (let [[r           (io real-world)]
          [v           (car r)]
          [real-world2 (cdr r)]]
      (f v real-world2))))

(define (return-io x)
  (lambda (real-world)
    (cons x real-world)))

(define (map-io f io)
  (lambda (real-world)
    (let [[r           (io real-world)]
          [v           (car r)]
          [real-world2 (cdr r)]]
      (cons (f v) real-world2))))

;;; Section Panicking

(extern _panic (-> String Nil))

(define: (panic msg)
    (-> String a)
  (undef (_panic msg)))

;; ;;; Section Random number generation
;; ;;;
;; ;;; Uses a global rng

;; (extern pcg32_srandom (-> (Cons (Cons UInt64 UInt64) RealWorld) (Cons Nil RealWorld))) ;
;; (extern pcg32_random (-> RealWorld (Cons UInt32 RealWorld)))

;; ;;? Seed the global rng
;; (define: (seed-rng initstate real-world)
;;     (-> UInt64 RealWorld (Cons Nil RealWorld))
;;   (pcg32_srandom (cons (cons initstate 42) real-world)))

;; ;;? Generate a random number in [0, n) using the global rng
;; (define (random n)
;;   (iomap (lambda (r) (remainder (cast r _) n))
;;          pcg32_random))

;;; Section Function compositioning

(define (flip f a b) (f b a))

;;; Section Option and Either

(data (Maybe a)
  None
  (Some a))

(define None (new None))
(define (Some a) (new Some a))

(define (maybe-num-to-s m)
  (match m
    [None     "None"]
    [(Some x) (concat-s (list "(Some " (num-to-s x) ")"))]))

;; ;;; Section Iteration

;; (define (next iterator)
;;   (let [[f      (car iterator)]
;;         [state  (cdr iterator)]
;;         [r      (f state)]
;;         [item   (car r)]
;;         [state2 (cdr r)]]
;;     (cons item (cons f state2))))

;; ;;? Returns an iterator of the numbers from `n` to `m`
;; (define (range n m)
;;   (cons (lambda (i)
;;           (if (< i m)
;;               (cons (right i) (+ i 1))
;;             (cons (left i) i)))
;;         n))

;; (define (for iterator f state)
;;   (let [[r          (next iterator)]
;;         [maybe-item (car r)]
;;         [iterator2  (cdr r)]]
;;     (if (is-right maybe-item)
;;         (for iterator2 f (f (unwrap maybe-item) state))
;;       state)))

(define (for-io xs io real-world)
  (if (empty? xs)
      (cons nil real-world)
    (for-io (tail xs) io (cdr (io (head xs) real-world)))))

;; (define (loop-n-times-io n f)
;;   (for-io (range 0 n)
;;           (lambda (_) f)))

;; (define (do-while-io f real-world)
;;   (let [[r           (f real-world)]
;;         [real-world2 (cdr r)]]
;;     (if (is-right (car r))
;;         (do-while-io f real-world2)
;;       (cons nil real-world2))))

;; (define (continue-while-io io)
;;   (map-io right io))

;; (define (break-while-io io)
;;   (map-io left io))

;;; Section Misc / Builtin / Core / Intrinsics

(define: (id x)
    (-> t t)
  x)

(define: (const c x)
    (-> a b a)
  c)

(define: (undef _)
    (-> Nil t)
  (undef nil))

(define: (add _)
    (constrain [(Num t)] (-> (Cons t t) t))
  (undef nil))
(define: (sub _)
    (constrain [(Num t)] (-> (Cons t t) t))
  (undef nil))
(define: (mul _)
    (constrain [(Num t)] (-> (Cons t t) t))
  (undef nil))
(define: (div _)
    (constrain [(Num t)] (-> (Cons t t) t))
  (undef nil))

(define: (eq _)
    (constrain [(Num t)] (-> (Cons t t) Bool))
  (undef nil))
(define: (neq _)
    (constrain [(Num t)] (-> (Cons t t) Bool))
  (undef nil))
(define: (gt _)
    (constrain [(Num t)] (-> (Cons t t) Bool))
  (undef nil))
(define: (gteq _)
    (constrain [(Num t)] (-> (Cons t t) Bool))
  (undef nil))
(define: (lt _)
    (constrain [(Num t)] (-> (Cons t t) Bool))
  (undef nil))
(define: (lteq _)
    (constrain [(Num t)] (-> (Cons t t) Bool))
  (undef nil))
